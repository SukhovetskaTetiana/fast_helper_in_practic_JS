// CLOSURE FUNCTION

//–ó–∞–º—ã–∫–∞–Ω–∏–µ (–∞–Ω–≥–ª. closure) –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞, –≤ —Ç–µ–ª–µ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –≤–Ω–µ —Ç–µ–ª–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–∫—Ä—É–∂–∞—é—â–µ–º –∫–æ–¥–µ –∏ –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –µ—ë –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.

// –ó–∞–º—ã–∫–∞–Ω–∏–µ - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤ —Å–µ–±–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏. –¢.–µ. –æ–Ω–∞ "–∑–∞–º—ã–∫–∞–µ—Ç" –≤–Ω–µ—à–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å–µ–±–µ.

//–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ javascrtipt –∑–∞–º—ã–∫–∞–Ω–∏–µ - —ç—Ç–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ (–∞ —Å—Ç–∞–ª–æ –±—ã—Ç—å –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –Ω–µ–π) –≤ –¥–æ—á–µ—Ä–Ω—é—é. –ê –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ javascript –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏.

//–≤—ã–ø–æ–ª–Ω—è—é—â–∞—è—Å—è —Ñ—É–Ω–∫—Ü–∏—è - —ç—Ç–æ –æ–±—å–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏
// —Å–≤–æ–π—Å—Ç–≤–∞ —ç—Ç–æ–≥–æ –æ–±—å–µ–∫—Ç–∞ - —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// –≤–Ω—É—Ç—Ä–∏ –æ–±—å–µ–∫—Ç–∞ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—å–µ–∫—Ç–∞ –≤–Ω–µ—à–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
// –æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –µ–µ –æ–±—å–µ–∫—Ç —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –ø–∞–º—è—Ç–∏ –∞—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
// –Ω–æ –µ—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–∞ —ç—Ç–æ–≥–æ –æ–±–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–ø—Ä–∏–º–µ—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π —Ç–æ –æ–±—å–µ–∫—Ç –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç

const fnA = (parameter) => {
  const innerVaiableFnA = `It's inner fnA`;

  const innerfnB = () => {
    console.log(`${parameter} ${innerVaiableFnA} and it's call innerFnB`);
  };
  return innerfnB;
};

// fnA('hI'); // undefined

const fnC = fnA("HI!");
console.log(fnC); // () => {console.log(`${parameter} ${innerVaiableFnA} and it's call innerFnB`);}

fnC(); // HI! It's inner fnA and it's call innerFnB

// make dish

// const makeDish = (sheffName, dish) => {
// console.log(`${sheffName} make ${dish}`);
// };

const makeSheff = (name) => {
  const makeDish = (dish) => {
    console.log(`${name} make ${dish}`);
  };
  return makeDish;
};

makeSheff("Stefan"); // undefined

const sheffStefan = makeSheff("Stefan");
console.log(sheffStefan); // (sheffName, dish) => {console.log(`${sheffName} make ${dish}`);}
sheffStefan(); // Stefan make undefined
sheffStefan("potato"); // Stefan make potato

const sheffNicholas = makeSheff("Nicholas");
sheffNicholas("soup with cheese"); // Nicholas make soup with cheese

// closure rounders

function rounders(num, quantity) {
  return Number(num.toFixed(quantity));
}

console.log(rounders(2.34565, 2)); //2.35

function getRounder(quantity) {
  function rounders(num) {
    return Number(num.toFixed(quantity));
  }
  return rounders;
}

const rounder1 = getRounder(1);
console.log(rounder1(3.342341)); // 3.3
console.log(rounder1(8.042342)); // 8

const rounder2 = getRounder(2);
console.log(rounder2(3.342341)); // 3.34
console.log(rounder2(8.042342)); // 8.04

const rounder3 = getRounder(3);
console.log(rounder3(3.342343)); // 3.342
console.log(rounder3(8.042344)); // 8.042

const rounder4 = getRounder(4);
console.log(rounder4(3.342343)); // 3.3423
console.log(rounder4(8.042344)); // 8.0423

// closure value

function myLibFactory() {
  let value = 1;

  const add = (num) => {
    value += num;
  };

  return {
    add,
    getValue() {
      return value;
    },
  };
}

const myLib = myLibFactory();
console.log(myLib); // {add: ∆í, getValue: ∆í}
console.log(myLib.getValue); // getValue() {return value;}
myLib.getValue(); // undefined
console.log(myLib.getValue()); // 1
myLib.add(10);
console.log(myLib.getValue()); // 11

// closure salary

const salary = (teacherName, salary = 0) => {
  // private variable
  let baseSalary = salary;

  //interface
  return {
    raise(amount) {
      if (amount > 1000) {
        return `Are you awesome?`;
      }
      baseSalary += amount;
    },
    lower(amount) {
      return (baseSalary -= amount);
    },
    currentSalary(amount) {
      return `${teacherName}'s current salary is ${baseSalary}$`;
    },
  };
};

const mathTeacher = salary("Oncu", 700);
console.log(mathTeacher); // {raise: ∆í, lower: ∆í, currentSalary: ∆í}
mathTeacher.currentSalary(); // undefined
console.log(mathTeacher.currentSalary()); // Oncu's current salary is 700$

mathTeacher.raise(100);
console.log(mathTeacher.currentSalary()); // Oncu's current salary is 800$

mathTeacher.lower(30); // undefined
console.log(mathTeacher.lower(30)); // 740 => 800 - 30 - 30
// console.log(mathTeacher.lower()); // NaN
console.log(mathTeacher.currentSalary()); // Oncu's current salary is 740$

mathTeacher.raise(15000);
console.log(mathTeacher.raise(15000)); // Are you awesome?
console.log(mathTeacher.currentSalary()); // Oncu's current salary is 740$

// ARROW FUNCTION ==============================================================================

const arrowFn = () => {
  return {
    name: "Harry",
  };
};

console.log(arrowFn()); // {name: 'Harry'}

const arrowFnA = () => ({ name: "Harry" });
console.log(arrowFnA()); // {name: 'Harry'}

// INLINE FUNCTION ===============================================================================

const fnD = (arr, test) => {
  const filterArr = [];

  for (const num of arr) {
    const passed = test(num);

    if (passed) {
      filterArr.push(num);
    }
  }
  return filterArr;
};

const getEqual = (num) => num > 12;

const fnE = fnD([10, 5, 13, 234], getEqual);
console.log(fnE); // ¬†[13, 234]

const fnF = fnD([10, 5, 13, 234], (num) => num > 12); // INLINE FUNCTION
console.log(fnF); //[13, 234]

// ARROW FUNCTION + THIS
// EXPLICIT RETURN  —è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç  { return ... }
// IMPLICIT RETURN  –Ω–µ—è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç

const add = (...args) => args;
add(1, 23, 45);
console.log(add(1, 23, 45)); // [1, 23, 45]

// context this
//  —è–∫—â–æ –≤ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ–π —Ñ-—Ü—ñ—ó –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø–æ–ª—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É this - window (undefined)
const showThis = () => {
  console.log("this is in showThis: ", this);
};

showThis(); // this is in showThis: window (undefined)
// this.showThis(); //Uncaught TypeError:

const showThatThis = function () {
  console.log("this is in showThatThis: ", this);
};

showThatThis(); // this is in showThatThis:  undefined

const anybody = { nameAnybody: "Anybody" };

anybody.showContext = showThis;
anybody.showContext(); //this is in showThis: window (undefined)

// this –≤ –º–µ—Ç–æ–¥—ñ
// arrow how object methods
const anybodyUser = {
  fullName: "Anybody",
  showName() {
    console.log("this: ", this); // {fullName: 'Anybody', showName{....}}
    console.log("this.fullName: ", this.fullName); // 'Anybody'

    const inner = function () {
      console.log("this is in inner: ", this); // this is in inner:  undefined
      // console.log('this.fullName: ', this.fullName); // Uncaught TypeError: Cannot read properties of undefined
    };

    inner();

    const innerArrow = () => {
      console.log("this is in innerArrow: ", this); // {fullName: 'Anybody', showName{....}}
      console.log("this.fullName: ", this.fullName); // this.fullName:  Anybody
    };

    innerArrow();
  },
};
anybodyUser.showName();

// context this
const book = {
  title: "React for beginners",
  showThis() {
    console.log("showThis -> this", this);
  },
  showTitle() {
    console.log("showTitle -> this.title", this.title);
  },
};

book.showThis(); // title: 'React for beginners', showThis: ∆í, showTitle: ∆í}
book.showTitle(); // React for beginners

const outerShowThis = book.showThis;
outerShowThis(); // this undefined

// const outerShowTitle = book.showTitle;
// outerShowTitle(); // TypeError: Cannot read properties of undefined

//context this
const makeChangeColor = function () {
  const changeColor = function (color) {
    console.log("changeColor -> this", this);
    //this.color = color;
  };
  changeColor(); // this undefined

  const sweater = {
    color: "teal",
  };

  sweater.updateColor = changeColor;

  sweater.updateColor("red"); // {color: 'teal', updateColor: ∆í}

  return sweater.updateColor;
};

makeChangeColor(); //
console.log(makeChangeColor());
//  f (color) {
//   console.log('changeColor -> this', this);
//   //this.color = color;
// }

/*
 * –ö–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó, —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏—â–æ–≥–æ –ø–æ—Ä—è–¥–∫—É
 */

const greet = function (username, callback) {
  callback(username);
};

const simpleGreet = function (username) {
  console.log(`Hello ${username}`);
};

const fullGreet = function (fullName) {
  console.log(`Hello ${fullName}`);
};

const prettyGreet = function (username) {
  console.log(`Hello ${username} üëã`);
};

greet("Oleksii", simpleGreet);
greet("Oleksii Repin", fullGreet);
greet("Oleksii", prettyGreet);

// ? –ó–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
//
const fetchUser = async function (userUrl, callback) {
  const response = await fetch(`https://api.github.com/users/${userUrl}`);
  const result = await response.json();

  callback(result);
};

const showInfoAboutUser = function (user) {
  console.log(user);
};

const showAvatar = function (user) {
  console.log(user.avatar_url);
};

fetchUser("olexiy-repin", showInfoAboutUser);
fetchUser("olexiy-repin", showAvatar);

/*
? –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É.
? –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–±–±–µ–∫–∞.
*/

const numbersA = [1, 2, 3, 4, 5];

const eachEl = function (array, callback) {
  const newArray = [];

  for (const item of array) {
    const updatedItem = callback(item);
    newArray.push(updatedItem);
  }

  return newArray;
};

const multi = function (el) {
  return el * 2;
};

const addA = function (el) {
  return el + 2;
};

const logElements = function (el) {
  return el * el;
};

console.log(eachEl(numbersA, multi)); // [2, 4, 6, 8, 10]
console.log(eachEl(numbersA, addA)); // [3, 4, 5, 6, 7]
console.log(eachEl(numbersA, logElements)); //[1, 4, 9, 16, 25]

/*
? –ù–∞–ø–∏—à—ñ—Ç—å —Ç–∞–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
? createProduct(product, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é.
? –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ id —ñ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
? logProduct(product) - –∫–æ–ª–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—î –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
? logTotalPrice(product) - –∫–æ–ª–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å
*/

const createProduct = (product, callback) => {
  const newProduct = {
    id: Date.now(),
    ...product,
  };

  callback(newProduct);
};

const logProduct = (product) => {
  console.log(product);
};

const logTotalPrice = ({ price, quantity } = {}) => {
  console.log(`Total price: ${price * quantity}`);
};

function doubleQuantity({ quantity }) {
  console.log(quantity * 2);
}

const product = { name: "Tomato", price: 10, quantity: 43 };
createProduct(product, doubleQuantity);
createProduct({ name: "üçé", price: 30, quantity: 3 }, logProduct);
createProduct({ name: "üçé", price: 30, quantity: 3 }, logTotalPrice);

createProduct({ name: "üçã", price: 20, quantity: 5 }, logProduct);
createProduct({ name: "üçã", price: 20, quantity: 5 }, logTotalPrice);

/*
? –î–æ–¥–∞–π—Ç–µ –æ–±'—î–∫—Ç—É account –º–µ—Ç–æ–¥–∏  withdraw(amount, onSuccess, onError) —ñ deposit(amount, onSuccess, onError), –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —ñ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–±–µ–∫–∏.
?
? –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î:
? onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`) —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT
? onError(`Amount can't exceed account balance of ${this.balance} credits`) —è–∫—â–æ amount –±—ñ–ª—å—à–µ this.balance
? —ñ–Ω–∞–∫—à–µ –∑–Ω—ñ–º–∞—î–º–æ –≥—Ä–æ—à—ñ –∑ –±–∞–ª–∞–Ω—Å—É —ñ –≤–∏–∫–ª–∏–∫–∞—î–º–æ onSuccess(`Account balance: ${this.balance}`)
?
? –ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î:
? onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`) —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT
? onError(`Amount must be more than 0 credits`) —è–∫—â–æ amount –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é
? —ñ–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ –¥–æ –±–∞–ª–∞–Ω—Å—É amount —ñ –≤–∏–∫–ª–∏–∫–∞—î–º–æ onSuccess(`Account balance: ${this.balance}`)
*/

const TRANSACTION_LIMIT = 1000;

const account = {
  username: "Jacob",
  balance: 400,

  withdraw(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT || amount > this.balance) {
      onError({
        message: "C—Ç–∞–ª–∞—Å—å –±—ñ–¥–∞. –õ—ñ–º—ñ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∞–±–æ –≥—Ä–æ—à–µ–π –Ω–µ–º–∞",
        status: "ERROR",
      });
    } else {
      onSuccess({
        status: "OK",
        message: "–û–ø–µ—Ä–∞—Ü—ñ—è withdraw —É—Å–ø—ñ—à–Ω–∞",
      });
    }
  },

  // withdraw(amount, onSuccess, onError) {
  //   if (amount > TRANSACTION_LIMIT) {
  //     onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
  //   } else if (amount > this.balance) {
  //     onError(`Amount can't exceed account balance of ${this.balance} credits`);
  //   } else {
  //     this.balance -= amount;
  //     onSuccess(`Account balance: ${this.balance}`);
  //   }
  // },

  deposit(amount, onSuccess, onError) {
    if (amount <= 0 || amount > TRANSACTION_LIMIT) {
      onError({
        message:
          "Deposit –Ω–µ –≤–¥–∞–≤—Å—è. –ë–æ —Å—É–º–∞ –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—å. –ê–±–æ –ª—ñ–º—ñ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ",
        status: "ERROR DEPOSIT",
      });
    } else {
      onSuccess({
        message: "–í—Å–µ –≥—É–¥",
      });
    }
  },
};

// deposit(amount, onSuccess, onError) {
//   if (amount > TRANSACTION_LIMIT) {
//     onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
//   } else if (amount <= 0) {
//     onError(`Amount must be more than 0 credits`);
//   } else {
//     this.balance += amount;
//     onSuccess(`Account balance: ${this.balance}`);
//   }
// },

const handleSuccess = ({ message, status = "OK" }) => {
  console.log(`${status}: ${message}`);
};

const handleError = ({ message, status }) => {
  console.log(`${status}: ${message}`);
};

// function handleSuccess(message) {
//   console.log(`‚úÖ Success! ${message}`);
// }

// function handleError(message) {
//   console.log(`‚ùå Error! ${message}`);
// }

account.withdraw(2000, handleSuccess, handleError);
account.withdraw(600, handleSuccess, handleError);
account.withdraw(300, handleSuccess, handleError);
account.deposit(1700, handleSuccess, handleError);
account.deposit(0, handleSuccess, handleError);
account.deposit(-600, handleSuccess, handleError);
account.deposit(600, handleSuccess, handleError);

//
function eachA(array, callback) {
  const newArr = [];
  for (const el of array) {
    newArr.push(callback(el));
  }
  return newArr;
}

console.log(eachA([64, 49, 36, 25, 16], (value) => value * 2)); //[128, 98, 72, 50, 32]
console.log(eachA([64, 49, 36, 25, 16], (value) => value - 10)); //[54, 39, 26, 15, 6]

console.log(
  eachA([64, 49, 36, 25, 16], function (value) {
    return Math.sqrt(value);
  })
); //¬†[8, 7, 6, 5, 4]

//
const usersA = [
  {
    name: "artem",
    age: 30,
  },
];

const resA = eachA(usersA, (user) => {
  return {
    ...user,
    name: user.name.toUpperCase(),
  };
});

console.log(resA); // {name: 'ARTEM', age: 30}
