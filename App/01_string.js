/** All about String */

/** 01. theory block */
const nameFirst = "Tetiana";
console.log(nameFirst.length); // 7;
// console.log(nameFirst.charAt(-2)); // a;
console.log(nameFirst.toUpperCase()); // TETIANA;
console.log(nameFirst.toLowerCase()); // tetiana;
console.log(nameFirst.charAt(2)); // t;
console.log(nameFirst.indexOf("!")); // -1;
console.log(nameFirst.lastIndexOf("a")); // 6;
console.log(nameFirst.includes("ana")); // true;
console.log(nameFirst.toLowerCase().startsWith("tet")); // true;
console.log(nameFirst.startsWith("Tet")); // true;
console.log(nameFirst.endsWith("na!")); // false;
console.log(nameFirst.repeat(3)); // TetianaTetianaTetiana;
console.log(nameFirst.slice(3, 6)); // ian;
console.log(nameFirst.slice(-4, -1)); // ian;
console.log(nameFirst.slice(3)); // iana;
console.log(nameFirst.codePointAt(0)); // T - 84;
console.log(nameFirst.codePointAt(2)); //t - 116;
console.log(String.fromCodePoint(84)); // T;
console.log(String.fromCodePoint(116)); // t;
console.log(nameFirst.split("")); // ['T', 'e', 't', 'i', 'a', 'n', 'a'];

/**replace() */
console.log(nameFirst.replace("T", "N")); // Netiana;
console.log(nameFirst.replace("a", "A")); // TetiAna - –∑–∞–º–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ;
console.log(nameFirst.replace(/a/g, "A")); // TetiAnA - –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è;

let str = "Tetiana Sukhovetska";

// –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
console.log(str.replace(/(\w+) (\w+)/i, "$2 $1")); // Sukhovetska Tetiana
console.log(
  str.replace(/(\w+) (\w+)/, (match, name, surname) => `${surname} ${name}`)
); // Sukhovetska Tetiana

/** trim() */
const string = "     password      ";
console.log(string.trim()); // "password";
// console.log(string.trimLeft());
// console.log(string.trimRight());

/** –º–æ–∂–Ω–æ –ø–µ—Ä–µ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è for..of */
for (let char of "Tetiana") {
  console.log(char); // T,e,t,i,a,n,a
}

/** 02. function logPerson(){} */
function logPerson(s, name, age) {
  if (age < 0) {
    age = "–ï—â–µ –Ω–µ —Ä–æ–¥–∏–ª—Å—è";
  }
  return `${s[0]}${name}${s[1]}${age}${s[2]}`;
}

const personName = "Tetiana";
const personName2 = "Khrystyna";
const personAge = 23;
const personAge2 = -10;

const out_1 = logPerson`–ò–º—è: ${personName}, –í–æ–∑—Ä–∞—Å—Ç: ${personAge}!`;
const out_2 = logPerson`–ò–º—è: ${personName2}, –í–æ–∑—Ä–∞—Å—Ç: ${personAge2}!`;

console.log(out_1);
console.log(out_2);

/**03. function RemoveExclamationMarks() which removes all exclamation marks from a given string - –ø—Ä–∏–±–∏—Ä–∞—î –≤—Å—ñ –∑–Ω–∞–∫–∏ –æ–∫–ª–∏–∫—É */
function removeExclamationMarks(s) {
  return s.split("!").join("");
}

/**04. function reverseLetter() - reverse string and omit all non-alphabetic characters. For str = "krishan", the output should be "nahsirk". For str = "ultr53o?n", the output should be "nortlu" - –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–µ–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
 */

const reverseLetter = (str) =>
  str
    .replaceAll(/[^a-z–∞-—è—ë]/gi, "")
    .split("")
    // .filter((x) => isNaN(x))
    .reverse()
    .join("");

console.log(reverseLetter("anaytet")); // 'tetyana'
console.log(reverseLetter("any44tsyr?/hk")); // 'khrystyna'

/**05. Regular Expressions */

// const str = '1. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/\s/g, '');
// const str = '2. –ö–∞–∫  —É–¥–∞–ª–∏—Ç—å  –¥–≤–æ–π–Ω—ã–µ  –ø—Ä–æ–±–µ–ª—ã  –∏–∑  —Å—Ç—Ä–æ–∫–∏  —Å  –ø–æ–º–æ—â—å—é  JavaScript?';
// str = str.replace(/\s+/g, ' ');
// const str = '3. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –±—É–∫–≤—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[a-z–∞-—è—ë]/gi, '');
// const str = '4. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ –±—É–∫–≤ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[^a-z–∞-—è—ë]/gi, '');
// const str = '5. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[^a-z–∞-—è—ë\s]/gi, '');
// const str = '6. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å —Ü–∏—Ñ—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[0-9]/g, '');
// const str = '7. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[^0-9]/g, '');
// const str = '8. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ 0123456789, . –∏ , –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[^0-9,.]/g, ' ');
// const str = '9. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[^a-z–∞-—è—ë0-9\s]/gi, ' ');
// const str = '10. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å üòÄüòÉüòÑüòÅüòÜüòÖüòÇü§£üòá–∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(
//   /([\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83[\uDD10-\uDDFF])/g,
//   ''
// );

/** 05_00  ¬´—Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏¬ª */
let guestList = "Guests:\n * John\n * Pete\n * Mary";

console.log(guestList); // —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫

/** 05_01 ¬´—Å–∏–º–≤–æ–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è¬ª*/
console.log("I'm the Walrus!"); // I'm the Walrus!

// next variant

// 05_1. –ú–µ—Ç–æ–¥ match() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–∏–≤—à–∏–µ—Å—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º. –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ array. –û–±—ä–µ–∫—Ç Array, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.
function reverseLetters(str) {
  return str.match(/[a-z]/gi).reverse().join("");
}

console.log(reverseLetters("anaytet")); // 'tetyana'
console.log(reverseLetters("any44tsyr?/hk")); // 'khrystyna'

// 05_2. Simple, remove the spaces from the string, then return the resultant string.
const noSpace = (x) => x.match(/[^\s]/gi).join("");

console.log(noSpace("8 j 8   mBliB8g  imjB8B8  jl  B")); // '8j8mBliB8gimjB8B8jlB'
console.log(noSpace("8 8 Bi fk8h B 8 BB8B B B  B888 c hl8 BhB fd")); //'88Bifk8hB8BB8BBBB888chl8BhBfd'
console.log(noSpace("8aaaaa dddd r     ")); // '8aaaaaddddr'

//next variant
function noSpaces(x) {
  return x.split(" ").join("");
}

/** 05_3. Write a function that will check if two given characters are the same case - –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –¥–≤–∞ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞.
If either of the characters is not a letter, return -1 / –ï—Å–ª–∏ –∫–∞–∫–æ–π-–ª–∏–±–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—É–∫–≤–æ–π, –≤–µ—Ä–Ω–∏—Ç–µ -1; 
If both characters are the same case, return 1 / –ï—Å–ª–∏ –æ–±–∞ —Å–∏–º–≤–æ–ª–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–µ–≥–∏—Å—Ç—Ä, –≤–µ—Ä–Ω–∏—Ç–µ 1;
If both characters are letters, but not the same case, return 0 / –ï—Å–ª–∏ –æ–±–∞ —Å–∏–º–≤–æ–ª–∞ —è–≤–ª—è—é—Ç—Å—è –±—É–∫–≤–∞–º–∏, –Ω–æ –Ω–µ –≤ –æ–¥–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –≤–µ—Ä–Ω–∏—Ç–µ 0.
Examples:
'a' and 'g' returns 1
'A' and 'C' returns 1
'b' and 'G' returns 0
'B' and 'g' returns 0
'0' and '?' returns -1 */

function sameCase(a, b) {
  if (a.match(/[a-z]/) && b.match(/[a-z]/)) {
    return 1;
  }
  if (a.match(/[A-Z]/) && b.match(/[A-Z]/)) {
    return 1;
  }
  if (b.match(/[a-z]/) && a.match(/[A-Z]/)) {
    return 0;
  }
  if (a.match(/[a-z]/) && b.match(/[A-Z]/)) {
    return 0;
  }
  return -1;
}

console.log(sameCase("a", "g")); // 1
console.log(sameCase("A", "C")); // 1
console.log(sameCase("b", "G")); // 0
console.log(sameCase("B", "g")); // 0
console.log(sameCase("0", "?")); // -1

/** 05_4. Return the number (count) of vowels in the given string (–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –≤ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ).
We will consider a, e, i, o, u as vowels for this Kata (but not y) (–ì–ª–∞—Å–Ω—ã–º–∏ –¥–ª—è —ç—Ç–æ–π –ö–∞—Ç–∞ –º—ã –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å a, e, i, o, u (–Ω–æ –Ω–µ y)).
The input string will only consist of lower case letters and/or spaces (–í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤ –∏/–∏–ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤). */

const getCount = (str) => str.replace(/[^aeiou]/g, "").length;
console.log(getCount("abracadabra")); // 5

//next variant
function getCounts(str) {
  return str.split("").filter((item) => "aeiou".includes(item)).length;
}
console.log(getCounts("abracadabra")); // 5

//----------------------------------------------------------

// const ds = '–î–æ–±—Ä–∏–π –î–µ–Ω—å —Ç–∞ –î–æ–±—Ä–∏–π –í–µ—á—ñ—Ä';
// const ns = ds.replace(/^([^\s]+)(\s+)([^\s]+)/, '$3$2$1');
// alert(ns);

// let re = /(\w+)\s(\w+)/;
// let name = 'Jane Doe';
// let lastFirst = name.replace(re, '$2, $1');
// Doe, Jane

//–†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ /(\w+)\s(\w+)/ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ–¥–Ω–æ–º—É –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–æ–º —Å–∏–º–≤–æ–ª–∞–º —Å–ª–æ–≤–∞, –ø—Ä–æ–±—ñ–ª—É, –∞ –ø–æ—Ç—ñ–º –æ–¥–Ω–æ–º—É –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–æ–º —Å–∏–º–≤–æ–ª–∞–º —Å–ª–æ–≤–∞. –Ü–Ω—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –≤—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –±—É–¥—å-—è–∫–æ–º—É —Ä—è–¥–∫—É, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ, –ø—Ä–æ–±—ñ–ª —Ç–∞ —ñ–Ω—à–µ —Å–ª–æ–≤–æ.

// –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –º—ñ—Å—Ç–∏—Ç—å –¥–≤—ñ –≥—Ä—É–ø–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è.
// –ü–µ—Ä—à–∞ –≥—Ä—É–ø–∞ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Ñ—ñ–∫—Å—É—î –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ, –∞ –¥—Ä—É–≥–∞ ‚Äì –¥—Ä—É–≥–µ —Å–ª–æ–≤–æ –ø—ñ—Å–ª—è –ø—Ä–æ–±—ñ–ª—É.

// –£ newSubstr –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ $1 –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–µ—Ä—à—É –≥—Ä—É–ø—É –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Ç–∞ $2 –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥—Ä—É–≥—É. –©–æ–± –ø–æ–º—ñ–Ω—è—Ç–∏ —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –º—ñ—Å—Ü—è–º–∏, –º–∏ —Å—Ç–∞–≤–∏–º–æ —Å–ø–æ—á–∞—Ç–∫—É –¥—Ä—É–≥–∏–π –∑–±—ñ–≥ ($2), –∞ –ø–æ—Ç—ñ–º –ø–µ—Ä—à–∏–π ($1).
